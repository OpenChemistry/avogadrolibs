name: Build Wheels

on: [push, pull_request]

env:
  # Don't build python 2.7, pypy, or 32-bit wheels
  CIBW_SKIP: "cp36-* cp37-* cp311-* pp* *-musllinux_* *-manylinux_i686 *-win32"

  # Need to do some setup before repairing the wheel on linux...
  CIBW_REPAIR_WHEEL_COMMAND_LINUX: bash scripts/github-actions/repair_command_linux.sh

  CIBW_BEFORE_ALL_LINUX: yum install -y git eigen3-devel

  # Specify eigen location for windows
  CIBW_ENVIRONMENT_WINDOWS: "EXTRA_CMAKE_ARGS=-DEigen3_INCLUDE_DIR:PATH=/c/eigen"

  CIBW_TEST_REQUIRES: pytest

  # On Mac, compile all arch
  CIBW_ARCHS_MACOS: x86_64 arm64 universal2

  CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
    DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

  # Run a very simple test to make sure the wheels are working
  CIBW_TEST_COMMAND: pytest {project}/scripts/github-actions/simple_test.py


# Use bash by default for the run command
defaults:
  run:
    shell: bash

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-2019]

    steps:
      - uses: actions/checkout@v3
        with:
          # Grab the whole history so that setuptools-scm can see the tags and
          # give it a correct version even on non-tag push.
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: pip install cibuildwheel==2.12.3

      - name: Install dependencies
        run: . ./scripts/github-actions/install.sh

      - name: Build wheels
        run:  cibuildwheel --output-dir wheelhouse

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: build_wheels
    name: Upload wheels to PyPI
    runs-on: ubuntu-latest
    # upload to PyPI on every tag push
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_api_token }}
