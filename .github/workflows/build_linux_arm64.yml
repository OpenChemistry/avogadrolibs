name: Linux ARM64 Build Matrix
# Many thanks to Cristian Adam for examples
# e.g. https://github.com/cristianadam/HelloWorld/blob/master/.github/workflows/build_cmake.yml
# https://cristianadam.eu/20191222/using-github-actions-with-c-plus-plus-and-cmake/

on: [push, pull_request, workflow_dispatch]

env:
  QT_VERSION: 6.8.3
  FEATURES: -DBUILD_GPL_PLUGINS=ON -DBUILD_MOLEQUEUE=OFF -DWITH_COORDGEN=OFF -DQT_VERSION=6

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu ARM", artifact: "",
            os: ubuntu-24.04-arm,
            cc: "gcc", cxx: "g++",
            build_type: "Debug",
            cmake_flags: "-G Ninja -DUSE_SYSTEM_EIGEN=TRUE",
          }
        - {
            name: "AppImage ARM", artifact: "Avogadro2-arm64.AppImage",
            os: ubuntu-24.04-arm,
            cc: "gcc", cxx: "g++",
            build_type: "Release",
            cmake_flags: "-G Ninja -DINSTALL_BUNDLE_FILES=ON",
          }

    steps:
    - name: Checkout workflow repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Checkout Repositories
      uses: ./.github/actions/checkout-repositories

    - name: Install Dependencies
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install ninja-build libeigen3-dev libboost-all-dev libglew-dev libxml2-dev
        sudo apt-get -qq install libfuse2

    - name: Install Qt
      uses: jurplel/install-qt-action@d325aaf2a8baeeda41ad0b5d39f84a6af9bcf005 # v4.3.0
      with:
        cache: true
        version: ${{ env.QT_VERSION }}

    - name: Configure
      run: |
        if [ ! -d "${{ runner.workspace }}/build" ]; then mkdir "${{ runner.workspace }}/build"; fi
        cd "${{ runner.workspace }}/build"
        CC=${{matrix.config.cc}} CXX=${{matrix.config.cxx}} cmake $GITHUB_WORKSPACE/openchemistry ${{env.FEATURES}} -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} ${{matrix.config.cmake_flags}}
      shell: bash

    - name: Build
      run: |
        CC=${{matrix.config.cc}} CXX=${{matrix.config.cxx}} cmake --build . --config ${{matrix.config.build_type}} ${{matrix.config.build_flags}}
      shell: bash
      working-directory: ${{ runner.workspace }}/build

    - name: Run tests
      if: (matrix.config.build_type != 'Release')
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)
        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
        set(ENV{ASAN_OPTIONS} "new_delete_type_mismatch=0")
        execute_process(
          COMMAND ctest -j ${N}
          WORKING_DIRECTORY ${{ runner.workspace }}/build/avogadrolibs
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()

    - name: Package AppImage
      if: matrix.config.name == 'AppImage ARM'
      shell: bash
      run: |
        mkdir appdir
        mv prefix appdir/usr

        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:appdir/usr/lib

        wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-aarch64.AppImage"
        wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-aarch64.AppImage"
        wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage"
        chmod a+x *.AppImage

        # get pixi
        # wget -c -nv "https://github.com/prefix-dev/pixi/releases/latest/download/pixi-aarch64-unknown-linux-musl"
        # mv pixi-aarch64-unknown-linux-musl appdir/usr/bin/pixi

        ./linuxdeploy-aarch64.AppImage -d appdir/usr/share/applications/*.desktop --plugin qt --library /usr/lib/aarch64-linux-gnu/libssl.so.3 --library /usr/lib/aarch64-linux-gnu/libcrypto.so.3 --appdir appdir
        # add the custom AppRun
        rm appdir/AppRun
        cp ../avogadrolibs/openchemistry/avogadrolibs/scripts/AppImage.sh appdir/AppRun
        chmod a+x appdir/AppRun
        ./appimagetool-aarch64.AppImage appdir
        mv Avogadro*.AppImage avogadroapp/Avogadro2-aarch64.AppImage # for upload
      working-directory: ${{ runner.workspace }}/build

    - name: Upload
      if: matrix.config.artifact != 0
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        path: ${{ runner.workspace }}/build/avogadroapp/Avogadro2*.*
        name: ${{ matrix.config.artifact }}

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@c0afd6f790e3a5564914980036ebf83216678101 # v3.23
      timeout-minutes: 60
