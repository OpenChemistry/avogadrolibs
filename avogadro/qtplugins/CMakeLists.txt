find_package(Eigen3 REQUIRED)
# Add as "system headers" to avoid warnings generated by them with
# compilers that support that notion.
include_directories(SYSTEM ${EIGEN3_INCLUDE_DIR})

find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)
include_directories(SYSTEM ${QT_INCLUDES})
add_definitions(${QT_DEFINITIONS})

find_package(MoleQueue)
include_directories(${MoleQueue_INCLUDE_DIRS})

include_directories(${CMAKE_CURRENT_BINARY_DIR})

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
  "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/avogadro2/plugins")

function(avogadro_plugin_ui name sources qt_uis)
  qt4_wrap_ui(ui_srcs ${qt_uis})
  add_library(${name} MODULE ${sources} ${ui_srcs})
  target_link_libraries(${name} AvogadroCore AvogadroQtGui)
  set_target_properties(${name} PROPERTIES AUTOMOC TRUE)
  install(TARGETS ${name}
    EXPORT "AvogadroLibsTargets"
    RUNTIME DESTINATION "${INSTALL_RUNTIME_DIR}"
    LIBRARY DESTINATION "${INSTALL_LIBRARY_DIR}/avogadro2/plugins"
    ARCHIVE DESTINATION "${INSTALL_ARCHIVE_DIR}/avogadro2/plugins")
  set_property(GLOBAL APPEND PROPERTY AvogadroLibs_PLUGINS ${name})
endfunction()

function(avogadro_plugin name sources)
  avogadro_plugin_ui(${name} "${sources}" "")
endfunction()

# Create a plugin for Avogadro.
# name is the name of the plugin, this will be the name of the target created.
# description Free text description of the plugin.
# type The base class of the plugin.
# header is the header(s) for the class to be instantiated for the plugin.
# pluginClass is the class to be instantiated for the plugin.
# sources is the list of source files for the plugin.
# uis is the list of UI files that need to be compiled (optional).
function(avogadro_plugin2 name description type header pluginClass sources uis)
  qt4_wrap_ui(ui_srcs ${uis})

  unset(PluginIncludes)
  foreach(_header ${header})
    set(PluginIncludes
      "${PluginIncludes}#include \"${CMAKE_CURRENT_SOURCE_DIR}/${_header}\"\n")
  endforeach()
  set(PluginName "${name}")
  set(PluginDescription "${description}")
  set(PluginType "${type}")
  set(PluginClass "${pluginClass}")
  configure_file("${AvogadroLibs_SOURCE_DIR}/cmake/avogadroplugin.cpp.in"
    "${CMAKE_CURRENT_BINARY_DIR}/${name}Plugin.cpp")

  add_library(${name} MODULE ${sources} ${ui_srcs} ${name}Plugin.cpp)
  target_link_libraries(${name} AvogadroCore AvogadroQtGui)

  set_target_properties(${name} PROPERTIES AUTOMOC TRUE)
  install(TARGETS ${name}
    EXPORT "AvogadroLibsTargets"
    RUNTIME DESTINATION "${INSTALL_RUNTIME_DIR}"
    LIBRARY DESTINATION "${INSTALL_LIBRARY_DIR}/avogadro2/plugins"
    ARCHIVE DESTINATION "${INSTALL_ARCHIVE_DIR}/avogadro2/plugins")
  set_property(GLOBAL APPEND PROPERTY AvogadroLibs_PLUGINS ${name})
endfunction()

# Now to make the plugins.

# Scene
avogadro_plugin2(VanDerWaals
  "Van der Waals rendering scheme"
  ScenePlugin
  vanderwaals.h
  VanDerWaals
  vanderwaals.cpp
  "")
avogadro_plugin2(BallStick
  "Ball and stick rendering scheme"
  ScenePlugin
  ballandstick.h
  BallAndStick
  ballandstick.cpp
  "")

# Extension
set(quantuminput_srcs
  gamessinputdialog.cpp
  gamesshighlighter.cpp
  quantuminput.cpp
)
avogadro_plugin2(QuantumInput
  "Quantum input file generation"
  ExtensionPlugin
  quantuminput.h
  QuantumInput
  "${quantuminput_srcs}"
  gamessinputdialog.ui
)
target_link_libraries(QuantumInput MoleQueueClient)

add_subdirectory(molecularproperties)
