/******************************************************************************

  This source file is part of the Avogadro project.

  Copyright 2013 Kitware, Inc.

  This source code is released under the New BSD License, (the "License").

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

******************************************************************************/

#include "xyzformat.h"

#include <avogadro/core/elements.h>
#include <avogadro/core/molecule.h>
#include <avogadro/core/vector.h>

#include <iomanip>
#include <istream>
#include <ostream>
#include <string>
#include <sstream>

using Avogadro::Core::Atom;
using Avogadro::Core::Elements;
using Avogadro::Core::Molecule;

namespace Avogadro {
namespace Io {

XyzFormat::XyzFormat()
{
}

XyzFormat::~XyzFormat()
{
}

bool XyzFormat::read(std::istream &inStream, Core::Molecule &mol)
{
  size_t numAtoms = 0;
  if (!(inStream >> numAtoms)) {
    appendError("Error parsing number of atoms.");
    return false;
  }

  // Throw away the title
  const size_t bufferSize = 1024;
  char *buffer = new char[bufferSize];
  inStream.getline(buffer, bufferSize); // Finish the first line
  inStream.getline(buffer, bufferSize); // Discard the example

  // Parse atoms
  bool result = true;
  Vector3 pos;
  for (size_t i = 0; i < numAtoms; ++i) {
    inStream >> std::setw(bufferSize);
    if (inStream >> buffer &&
        inStream >> pos.x() &&
        inStream >> pos.y() &&
        inStream >> pos.z()) {
      Atom newAtom = mol.addAtom(Elements::atomicNumberFromSymbol(buffer));
      newAtom.setPosition3d(pos);
    }
    else {
      std::ostringstream errorStream;
      errorStream << "Error parsing atom at index "
                  << i << " (line " << 3 + i << ")";
      appendError(errorStream.str());
      result = false;
      break;
    }
  }

  delete [] buffer;
  return result;
}

bool XyzFormat::write(std::ostream &outStream, const Core::Molecule &mol)
{
  size_t numAtoms = mol.atomCount();

  outStream << numAtoms << std::endl
            << "XYZ file generated by Avogadro." << std::endl;

  for (size_t i = 0; i < numAtoms; ++i) {
    Atom atom = mol.atom(i);
    if (!atom.isValid()) {
      appendError("Internal error: Atom invalid.");
      return false;
    }

    outStream << std::setw(3) << std::left
              << Elements::symbol(atom.atomicNumber()) << " "
              << std::setw(10) << std::right << std::fixed
              << std::setprecision(5)
              << atom.position3d().x() << " "
              << std::setw(10) << std::right << std::fixed
              << std::setprecision(5)
              << atom.position3d().y() << " "
              << std::setw(10) << std::right << std::fixed
              << std::setprecision(5)
              << atom.position3d().z() << "\n";
  }

  return true;
}

std::vector<std::string> XyzFormat::fileExtensions() const
{
  std::vector<std::string> ext;
  ext.push_back("xyz");
  return ext;
}

std::vector<std::string> XyzFormat::mimeTypes() const
{
  std::vector<std::string> mime;
  mime.push_back("chemical/x-xyz");
  return mime;
}

} // end Io namespace
} // end Avogadro namespace
